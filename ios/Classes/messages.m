// Autogenerated from Pigeon (v4.2.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[ error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null] ];
  }
  return @[ result ?: [NSNull null]  ];
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface InitWithAkSkRequestData ()
+ (InitWithAkSkRequestData *)fromList:(NSArray *)list;
+ (nullable InitWithAkSkRequestData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end
@interface InitResponseData ()
+ (InitResponseData *)fromList:(NSArray *)list;
+ (nullable InitResponseData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end
@interface OCRErrorResponseData ()
+ (OCRErrorResponseData *)fromList:(NSArray *)list;
+ (nullable OCRErrorResponseData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation InitWithAkSkRequestData
+ (instancetype)makeWithAk:(nullable NSString *)ak
    sk:(nullable NSString *)sk {
  InitWithAkSkRequestData* pigeonResult = [[InitWithAkSkRequestData alloc] init];
  pigeonResult.ak = ak;
  pigeonResult.sk = sk;
  return pigeonResult;
}
+ (InitWithAkSkRequestData *)fromList:(NSArray *)list {
  InitWithAkSkRequestData *pigeonResult = [[InitWithAkSkRequestData alloc] init];
  pigeonResult.ak = GetNullableObjectAtIndex(list, 0);
  pigeonResult.sk = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable InitWithAkSkRequestData *)nullableFromList:(NSArray *)list { return (list) ? [InitWithAkSkRequestData fromList:list] : nil; }
- (NSArray *)toList {
  return @[
    (self.ak ?: [NSNull null]),
    (self.sk ?: [NSNull null]),
  ];
}
@end

@implementation InitResponseData
+ (instancetype)makeWithIsSuccess:(nullable NSNumber *)isSuccess
    accessToken:(nullable NSString *)accessToken
    ocrError:(nullable OCRErrorResponseData *)ocrError {
  InitResponseData* pigeonResult = [[InitResponseData alloc] init];
  pigeonResult.isSuccess = isSuccess;
  pigeonResult.accessToken = accessToken;
  pigeonResult.ocrError = ocrError;
  return pigeonResult;
}
+ (InitResponseData *)fromList:(NSArray *)list {
  InitResponseData *pigeonResult = [[InitResponseData alloc] init];
  pigeonResult.isSuccess = GetNullableObjectAtIndex(list, 0);
  pigeonResult.accessToken = GetNullableObjectAtIndex(list, 1);
  pigeonResult.ocrError = [OCRErrorResponseData nullableFromList:(GetNullableObjectAtIndex(list, 2))];
  return pigeonResult;
}
+ (nullable InitResponseData *)nullableFromList:(NSArray *)list { return (list) ? [InitResponseData fromList:list] : nil; }
- (NSArray *)toList {
  return @[
    (self.isSuccess ?: [NSNull null]),
    (self.accessToken ?: [NSNull null]),
    (self.ocrError ? [self.ocrError toList] : [NSNull null]),
  ];
}
@end

@implementation OCRErrorResponseData
+ (instancetype)makeWithErrorCode:(nullable NSNumber *)errorCode
    errorMessage:(nullable NSString *)errorMessage {
  OCRErrorResponseData* pigeonResult = [[OCRErrorResponseData alloc] init];
  pigeonResult.errorCode = errorCode;
  pigeonResult.errorMessage = errorMessage;
  return pigeonResult;
}
+ (OCRErrorResponseData *)fromList:(NSArray *)list {
  OCRErrorResponseData *pigeonResult = [[OCRErrorResponseData alloc] init];
  pigeonResult.errorCode = GetNullableObjectAtIndex(list, 0);
  pigeonResult.errorMessage = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable OCRErrorResponseData *)nullableFromList:(NSArray *)list { return (list) ? [OCRErrorResponseData fromList:list] : nil; }
- (NSArray *)toList {
  return @[
    (self.errorCode ?: [NSNull null]),
    (self.errorMessage ?: [NSNull null]),
  ];
}
@end

@interface OcrHostApiCodecReader : FlutterStandardReader
@end
@implementation OcrHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [InitResponseData fromList:[self readValue]];
    
    case 129:     
      return [InitWithAkSkRequestData fromList:[self readValue]];
    
    case 130:     
      return [OCRErrorResponseData fromList:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface OcrHostApiCodecWriter : FlutterStandardWriter
@end
@implementation OcrHostApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[InitResponseData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else 
  if ([value isKindOfClass:[InitWithAkSkRequestData class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else 
  if ([value isKindOfClass:[OCRErrorResponseData class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface OcrHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation OcrHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[OcrHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[OcrHostApiCodecReader alloc] initWithData:data];
}
@end


NSObject<FlutterMessageCodec> *OcrHostApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    OcrHostApiCodecReaderWriter *readerWriter = [[OcrHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void OcrHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<OcrHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.initAccessTokenWithAkSk"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initAccessTokenWithAkSkRequest:completion:)], @"OcrHostApi api (%@) doesn't respond to @selector(initAccessTokenWithAkSkRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        InitWithAkSkRequestData *arg_request = GetNullableObjectAtIndex(args, 0);
        [api initAccessTokenWithAkSkRequest:arg_request completion:^(InitResponseData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.initAccessToken"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initAccessTokenWithCompletion:)], @"OcrHostApi api (%@) doesn't respond to @selector(initAccessTokenWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api initAccessTokenWithCompletion:^(InitResponseData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeGeneralBasic"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeGeneralBasicBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeGeneralBasicBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeGeneralBasicBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeAccurateBasic"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeAccurateBasicBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeAccurateBasicBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeAccurateBasicBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeGeneral"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeGeneralBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeGeneralBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeGeneralBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeAccurate"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeAccurateBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeAccurateBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeAccurateBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeGeneralEnhanced"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeGeneralEnhancedBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeGeneralEnhancedBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeGeneralEnhancedBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeWebimage"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeWebimageBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeWebimageBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeWebimageBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeDrivingLicense"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeDrivingLicenseBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeDrivingLicenseBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeDrivingLicenseBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeVehicleLicense"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeVehicleLicenseBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeVehicleLicenseBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeVehicleLicenseBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeBusinessLicense"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeBusinessLicenseBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeBusinessLicenseBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeBusinessLicenseBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeReceipt"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeReceiptBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeReceiptBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeReceiptBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeVatInvoice"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeVatInvoiceBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeVatInvoiceBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeVatInvoiceBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeTaxireceipt"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeTaxireceiptBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeTaxireceiptBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeTaxireceiptBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeLicensePlate"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeLicensePlateBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeLicensePlateBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeLicensePlateBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeVincode"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeVincodeBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeVincodeBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeVincodeBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeTrainticket"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeTrainticketBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeTrainticketBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeTrainticketBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeNumbers"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeNumbersBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeNumbersBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeNumbersBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeQrcode"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeQrcodeBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeQrcodeBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeQrcodeBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recoginzeTripTicket"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recoginzeTripTicketBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recoginzeTripTicketBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recoginzeTripTicketBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recoginzeVihickleSellInvoice"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recoginzeVihickleSellInvoiceBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recoginzeVihickleSellInvoiceBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recoginzeVihickleSellInvoiceBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recoginzeVihickleCertificate"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recoginzeVihickleCertificateBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recoginzeVihickleCertificateBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recoginzeVihickleCertificateBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recoginzeExampleDoc"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recoginzeExampleDocBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recoginzeExampleDocBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recoginzeExampleDocBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recoginzeWrittenText"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recoginzeWrittenTextBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recoginzeWrittenTextBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recoginzeWrittenTextBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizePassport"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizePassportBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizePassportBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizePassportBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recoginzeHuKouPage"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recoginzeHuKouPageBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recoginzeHuKouPageBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recoginzeHuKouPageBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recoginzeNormalMachineInvoice"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recoginzeNormalMachineInvoiceBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recoginzeNormalMachineInvoiceBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recoginzeNormalMachineInvoiceBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeCustom"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeCustomBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeCustomBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeCustomBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recoginzeweightnote"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recoginzeweightnoteBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recoginzeweightnoteBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recoginzeweightnoteBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recoginzemedicaldetail"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recoginzemedicaldetailBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recoginzemedicaldetailBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recoginzemedicaldetailBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recoginzeonlinetaxiitinerary"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recoginzeonlinetaxiitineraryBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recoginzeonlinetaxiitineraryBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recoginzeonlinetaxiitineraryBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
    /// 身份证正面(本地质量控制)
{
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeIdCardFrontNative"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeIdCardFrontNativeWithError:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeIdCardFrontNativeWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api recognizeIdCardFrontNativeWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
    /// 身份证反面(本地质量控制)
{
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeIdCardBackNative"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeIdCardBackNativeWithError:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeIdCardBackNativeWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api recognizeIdCardBackNativeWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
    /// 银行卡识别
{
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.OcrHostApi.recognizeBankCard"
        binaryMessenger:binaryMessenger
        codec:OcrHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(recognizeBankCardBytes:error:)], @"OcrHostApi api (%@) doesn't respond to @selector(recognizeBankCardBytes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_bytes = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api recognizeBankCardBytes:arg_bytes error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface RecognizeListenerFlutterApiCodecReader : FlutterStandardReader
@end
@implementation RecognizeListenerFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [OCRErrorResponseData fromList:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface RecognizeListenerFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation RecognizeListenerFlutterApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[OCRErrorResponseData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface RecognizeListenerFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation RecognizeListenerFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[RecognizeListenerFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[RecognizeListenerFlutterApiCodecReader alloc] initWithData:data];
}
@end


NSObject<FlutterMessageCodec> *RecognizeListenerFlutterApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    RecognizeListenerFlutterApiCodecReaderWriter *readerWriter = [[RecognizeListenerFlutterApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface RecognizeListenerFlutterApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation RecognizeListenerFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onReceivedStartImageBytes:(FlutterStandardTypedData *)arg_imageBytes completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.RecognizeListenerFlutterApi.onReceivedStart"
      binaryMessenger:self.binaryMessenger
      codec:RecognizeListenerFlutterApiGetCodec()];
  [channel sendMessage:@[arg_imageBytes ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onReceivedResultJsonResult:(NSString *)arg_jsonResult completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.RecognizeListenerFlutterApi.onReceivedResult"
      binaryMessenger:self.binaryMessenger
      codec:RecognizeListenerFlutterApiGetCodec()];
  [channel sendMessage:@[arg_jsonResult ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onReceivedErrorOcrErrorResponseData:(OCRErrorResponseData *)arg_ocrErrorResponseData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.RecognizeListenerFlutterApi.onReceivedError"
      binaryMessenger:self.binaryMessenger
      codec:RecognizeListenerFlutterApiGetCodec()];
  [channel sendMessage:@[arg_ocrErrorResponseData ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end
