// Autogenerated from Pigeon (v4.2.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package ren.yanhao.baidu_ocr_plugin;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class InitWithAkSkRequestData {
    private @Nullable String ak;
    public @Nullable String getAk() { return ak; }
    public void setAk(@Nullable String setterArg) {
      this.ak = setterArg;
    }

    private @Nullable String sk;
    public @Nullable String getSk() { return sk; }
    public void setSk(@Nullable String setterArg) {
      this.sk = setterArg;
    }

    public static final class Builder {
      private @Nullable String ak;
      public @NonNull Builder setAk(@Nullable String setterArg) {
        this.ak = setterArg;
        return this;
      }
      private @Nullable String sk;
      public @NonNull Builder setSk(@Nullable String setterArg) {
        this.sk = setterArg;
        return this;
      }
      public @NonNull InitWithAkSkRequestData build() {
        InitWithAkSkRequestData pigeonReturn = new InitWithAkSkRequestData();
        pigeonReturn.setAk(ak);
        pigeonReturn.setSk(sk);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(ak);
      toListResult.add(sk);
      return toListResult;
    }
    static @NonNull InitWithAkSkRequestData fromList(@NonNull ArrayList<Object> list) {
      InitWithAkSkRequestData pigeonResult = new InitWithAkSkRequestData();
      Object ak = list.get(0);
      pigeonResult.setAk((String)ak);
      Object sk = list.get(1);
      pigeonResult.setSk((String)sk);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class InitResponseData {
    private @Nullable Boolean isSuccess;
    public @Nullable Boolean getIsSuccess() { return isSuccess; }
    public void setIsSuccess(@Nullable Boolean setterArg) {
      this.isSuccess = setterArg;
    }

    private @Nullable String accessToken;
    public @Nullable String getAccessToken() { return accessToken; }
    public void setAccessToken(@Nullable String setterArg) {
      this.accessToken = setterArg;
    }

    private @Nullable OCRErrorResponseData ocrError;
    public @Nullable OCRErrorResponseData getOcrError() { return ocrError; }
    public void setOcrError(@Nullable OCRErrorResponseData setterArg) {
      this.ocrError = setterArg;
    }

    public static final class Builder {
      private @Nullable Boolean isSuccess;
      public @NonNull Builder setIsSuccess(@Nullable Boolean setterArg) {
        this.isSuccess = setterArg;
        return this;
      }
      private @Nullable String accessToken;
      public @NonNull Builder setAccessToken(@Nullable String setterArg) {
        this.accessToken = setterArg;
        return this;
      }
      private @Nullable OCRErrorResponseData ocrError;
      public @NonNull Builder setOcrError(@Nullable OCRErrorResponseData setterArg) {
        this.ocrError = setterArg;
        return this;
      }
      public @NonNull InitResponseData build() {
        InitResponseData pigeonReturn = new InitResponseData();
        pigeonReturn.setIsSuccess(isSuccess);
        pigeonReturn.setAccessToken(accessToken);
        pigeonReturn.setOcrError(ocrError);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(isSuccess);
      toListResult.add(accessToken);
      toListResult.add((ocrError == null) ? null : ocrError.toList());
      return toListResult;
    }
    static @NonNull InitResponseData fromList(@NonNull ArrayList<Object> list) {
      InitResponseData pigeonResult = new InitResponseData();
      Object isSuccess = list.get(0);
      pigeonResult.setIsSuccess((Boolean)isSuccess);
      Object accessToken = list.get(1);
      pigeonResult.setAccessToken((String)accessToken);
      Object ocrError = list.get(2);
      pigeonResult.setOcrError((ocrError == null) ? null : OCRErrorResponseData.fromList((ArrayList<Object>)ocrError));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OCRErrorResponseData {
    private @Nullable Long errorCode;
    public @Nullable Long getErrorCode() { return errorCode; }
    public void setErrorCode(@Nullable Long setterArg) {
      this.errorCode = setterArg;
    }

    private @Nullable String errorMessage;
    public @Nullable String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(@Nullable String setterArg) {
      this.errorMessage = setterArg;
    }

    public static final class Builder {
      private @Nullable Long errorCode;
      public @NonNull Builder setErrorCode(@Nullable Long setterArg) {
        this.errorCode = setterArg;
        return this;
      }
      private @Nullable String errorMessage;
      public @NonNull Builder setErrorMessage(@Nullable String setterArg) {
        this.errorMessage = setterArg;
        return this;
      }
      public @NonNull OCRErrorResponseData build() {
        OCRErrorResponseData pigeonReturn = new OCRErrorResponseData();
        pigeonReturn.setErrorCode(errorCode);
        pigeonReturn.setErrorMessage(errorMessage);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(errorCode);
      toListResult.add(errorMessage);
      return toListResult;
    }
    static @NonNull OCRErrorResponseData fromList(@NonNull ArrayList<Object> list) {
      OCRErrorResponseData pigeonResult = new OCRErrorResponseData();
      Object errorCode = list.get(0);
      pigeonResult.setErrorCode((errorCode == null) ? null : ((errorCode instanceof Integer) ? (Integer)errorCode : (Long)errorCode));
      Object errorMessage = list.get(1);
      pigeonResult.setErrorMessage((String)errorMessage);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class OcrHostApiCodec extends StandardMessageCodec {
    public static final OcrHostApiCodec INSTANCE = new OcrHostApiCodec();
    private OcrHostApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return InitResponseData.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)129:         
          return InitWithAkSkRequestData.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)130:         
          return OCRErrorResponseData.fromList((ArrayList<Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof InitResponseData) {
        stream.write(128);
        writeValue(stream, ((InitResponseData) value).toList());
      } else 
      if (value instanceof InitWithAkSkRequestData) {
        stream.write(129);
        writeValue(stream, ((InitWithAkSkRequestData) value).toList());
      } else 
      if (value instanceof OCRErrorResponseData) {
        stream.write(130);
        writeValue(stream, ((OCRErrorResponseData) value).toList());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface OcrHostApi {
    void initAccessTokenWithAkSk(@NonNull InitWithAkSkRequestData request, Result<InitResponseData> result);
    void initAccessToken(Result<InitResponseData> result);
    void recognizeGeneralBasic();
    void recognizeAccurateBasic();
    void recognizeGeneral();
    void recognizeAccurate();
    void recognizeGeneralEnhanced();
    void recognizeWebimage();
    void recognizeDrivingLicense();
    void recognizeVehicleLicense();
    void recognizeBusinessLicense();
    void recognizeReceipt();
    void recognizeVatInvoice();
    void recognizeTaxireceipt();
    void recognizeLicensePlate();
    void recognizeVincode();
    void recognizeTrainticket();
    void recognizeNumbers();
    void recognizeQrcode();
    void recoginzeTripTicket();
    void recoginzeVihickleSellInvoice();
    void recoginzeVihickleCertificate();
    void recoginzeExampleDoc();
    void recoginzeWrittenText();
    void recognizePassport();
    void recoginzeHuKouPage();
    void recoginzeNormalMachineInvoice();
    void recognizeCustom();
    void recoginzeweightnote();
    void recoginzemedicaldetail();
    void recoginzeonlinetaxiitinerary();
    /** 身份证正面(本地质量控制) */
    void recognizeIdCardFrontNative();
    /** 身份证反面(本地质量控制) */
    void recognizeIdCardBackNative();
    /** 银行卡识别 */
    void recognizeBankCard();

    /** The codec used by OcrHostApi. */
    static MessageCodec<Object> getCodec() {
      return       OcrHostApiCodec.INSTANCE;    }
    /**Sets up an instance of `OcrHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, OcrHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.initAccessTokenWithAkSk", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              InitWithAkSkRequestData requestArg = (InitWithAkSkRequestData)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              Result<InitResponseData> resultCallback = new Result<InitResponseData>() {
                public void success(InitResponseData result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.initAccessTokenWithAkSk(requestArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.initAccessToken", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              Result<InitResponseData> resultCallback = new Result<InitResponseData>() {
                public void success(InitResponseData result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.initAccessToken(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeGeneralBasic", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeGeneralBasic();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeAccurateBasic", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeAccurateBasic();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeGeneral", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeGeneral();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeAccurate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeAccurate();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeGeneralEnhanced", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeGeneralEnhanced();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeWebimage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeWebimage();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeDrivingLicense", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeDrivingLicense();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeVehicleLicense", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeVehicleLicense();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeBusinessLicense", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeBusinessLicense();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeReceipt", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeReceipt();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeVatInvoice", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeVatInvoice();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeTaxireceipt", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeTaxireceipt();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeLicensePlate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeLicensePlate();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeVincode", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeVincode();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeTrainticket", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeTrainticket();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeNumbers", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeNumbers();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeQrcode", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeQrcode();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recoginzeTripTicket", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recoginzeTripTicket();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recoginzeVihickleSellInvoice", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recoginzeVihickleSellInvoice();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recoginzeVihickleCertificate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recoginzeVihickleCertificate();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recoginzeExampleDoc", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recoginzeExampleDoc();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recoginzeWrittenText", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recoginzeWrittenText();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizePassport", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizePassport();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recoginzeHuKouPage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recoginzeHuKouPage();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recoginzeNormalMachineInvoice", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recoginzeNormalMachineInvoice();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeCustom", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeCustom();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recoginzeweightnote", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recoginzeweightnote();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recoginzemedicaldetail", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recoginzemedicaldetail();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recoginzeonlinetaxiitinerary", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recoginzeonlinetaxiitinerary();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeIdCardFrontNative", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeIdCardFrontNative();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeIdCardBackNative", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeIdCardBackNative();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OcrHostApi.recognizeBankCard", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.recognizeBankCard();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class RecognizeListenerFlutterApiCodec extends StandardMessageCodec {
    public static final RecognizeListenerFlutterApiCodec INSTANCE = new RecognizeListenerFlutterApiCodec();
    private RecognizeListenerFlutterApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return OCRErrorResponseData.fromList((ArrayList<Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof OCRErrorResponseData) {
        stream.write(128);
        writeValue(stream, ((OCRErrorResponseData) value).toList());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class RecognizeListenerFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public RecognizeListenerFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by RecognizeListenerFlutterApi. */
    static MessageCodec<Object> getCodec() {
      return       RecognizeListenerFlutterApiCodec.INSTANCE;
    }
    public void onReceivedStart(@NonNull byte[] imageBytesArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.RecognizeListenerFlutterApi.onReceivedStart", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(imageBytesArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onReceivedResult(@NonNull String jsonResultArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.RecognizeListenerFlutterApi.onReceivedResult", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(jsonResultArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onReceivedError(@NonNull OCRErrorResponseData ocrErrorResponseDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.RecognizeListenerFlutterApi.onReceivedError", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(ocrErrorResponseDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  @NonNull private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add("Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
